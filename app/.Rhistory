}
}
View(final_data_hourly)
final_data_hourly[col] <- final_data %>%
dplyr::select(col, newdate)%>%
dplyr::group_by(newdate) %>%
dplyr::summarise(col=mean(get(col))) %>% dplyr::select(col)
final_data_hourly <- final_data %>%
dplyr::mutate(new_date=newdate) %>%
dplyr::group_by(new_date) %>%
dplyr::summarise(BitcoinPrice = mean(BitcoinPrice))
print(col)
View(final_data_hourly)
View(final_data)
for (col in colnames(final_data)) {
if ((col!= "BitcoinPrice") && (col!="newdate")){
print(col)
final_data_hourly[col] <- final_data %>%
dplyr::select(col, newdate)%>%
dplyr::group_by(newdate) %>%
dplyr::summarise(col=mean(get(col))) %>% dplyr::select(col)
}
}
View(final_data_hourly)
bitcoin_price_ts <- zoo(
x         = final_data_hourly[["BitcoinPrice"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
OLS1 <- lm(bitcoin_price_ts ~ SP500_ts)
start(bitcoin_price_ts)
end(bitcoin_price_ts)
end(SP500_ts)
start(SP500_ts)
end(SP500_ts)
length(bitcoin_price_ts)
length(SP500_ts)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
length(SP500_ts)
start(SP500_ts)
end(SP500_ts)
head(SP)
head(SP500_ts)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
View(final_data_hourly)
bitcoin_price_ts <- zoo(
x         = final_data_hourly[["BitcoinPrice"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
final_data <- read.csv("C://Users/Devika/Documents/Columbia/Term 2/Frameworks II/Project/Raw Files/cleandata_final.csv")
final_data$date <- mdy(final_data$date)
final_data$newdate <- as.POSIXct(paste(final_data$date, final_data$time), format="%Y-%m-%d %H:%M:%S")
drop <- c("X","ID","word","date","time")
final_data = final_data[,!(names(final_data) %in% drop)]
View(final_data)
final_data_hourly <- final_data %>%
dplyr::mutate(new_date=newdate) %>%
dplyr::group_by(new_date) %>%
dplyr::summarise(BitcoinPrice = mean(BitcoinPrice))
for (col in colnames(final_data)) {
if ((col!= "BitcoinPrice") && (col!="newdate")){
print(col)
final_data_hourly[col] <- final_data %>%
dplyr::select(col, newdate)%>%
dplyr::group_by(newdate) %>%
dplyr::summarise(col=mean(get(col))) %>% dplyr::select(col)
}
}
View(final_data_hourly)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
bitcoin_price_ts <- zoo(
x         = final_data_hourly[["BitcoinPrice"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
View(final_data_hourly)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500Price"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
OLS1 <- lm(bitcoin_price_ts ~ SP500_ts)
summary(OLS1)
autoplot(cbind(bitcoin_price_ts,SP500_ts))
autoplot(cbind(bitcoin_price_ts,SP500_ts))
autoplot(cbind(bitcoin_price_ts))
autoplot(cbind(bitcoin_price_ts,SP500_ts))
autoplot(cbind(scale(bitcoin_price_ts),scale(SP500_ts)))
autoplot(rbind(scale(bitcoin_price_ts),scale(SP500_ts)))
autoplot(cbind(scale(bitcoin_price_ts),scale(SP500_ts)))
autoplot.zoo(cbind(scale(bitcoin_price_ts),scale(SP500_ts)))
#Finding the optimal lags
bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts)
colnames(bitcoinpred.multivariate) <- cbind("BitcoinPrice", "SP500Price")
lagselect <- VARselect(bitcoinpred.multivariate, lag.max=10, type="const")
lagselect$selection
#Building VAR
Modelbitcoinpred <- VAR(bitcoinpred.multivariate, p=6, type="const", season=NULL, exog=NULL)
summary(Modelbitcoinpred)
train <- head(bitcoinpred.multivariate, round(length(bitcoinpred.multivariate) * 0.7))
h <- length(bitcoinpred.multivariate) - length(train)
test <- tail(bitcoinpred.multivariate, h)
h
length(bitcoinpred.multivariate)
length(train)
round(length(bitcoinpred.multivariate) * 0.7
)
train <- head(bitcoinpred.multivariate, round(length(bitcoinpred.multivariate) * 0.7))
train
length(train)
nrow(train)
train <- head(bitcoinpred.multivariate, round(nrow(bitcoinpred.multivariate) * 0.7))
h <- nrow(bitcoinpred.multivariate) - nrow(train)
test <- tail(bitcoinpred.multivariate, h)
nrow(test)
#Divide the data into train and test
train <- head(bitcoinpred.multivariate, round(nrow(bitcoinpred.multivariate) * 0.7))
h <- nrow(bitcoinpred.multivariate) - nrow(train)
test <- tail(bitcoinpred.multivariate, h)
lagselect <- VARselect(train, lag.max=10, type="const")
lagselect$selection
#Building VAR
Modelbitcoinpred <- VAR(train, p=6, type="const", season=NULL, exog=NULL)
summary(Modelbitcoinpred)
#Predicting the values for RMSE
pred(Modelbitcoinpred, test)
#Predicting the values for RMSE
predict(Modelbitcoinpred, test)
#Predicting the values for RMSE
nrow(predict(Modelbitcoinpred, test))
#Predicting the values for RMSE
predicted_price <- predict(Modelbitcoinpred, test)$first
View(predicted_price)
#Predicting the values for RMSE
predicted_price <- predict(Modelbitcoinpred, test)$fcst
View(predicted_price)
View(test)
View(train)
predicted_price[["BitcoinPrice"]]
predicted_price[["SP500Price"]]
#Predicting the values for RMSE
predicted_price <- predict(Modelbitcoinpred, test$SP500Price)$fcst
View(predicted_price)
predicted_price[["SP500Price"]]
#Predicting the values for RMSE
predicted_price <- predict(Modelbitcoinpred, date=test$SP500Price)$fcst
View(predicted_price)
head(test)
end(train)
train = window(bitcoinpred.multivariate,end="2022-02-06 21:00:00 EST")
start(test)
test = window(ausbeer, start="2022-02-06 22:00:00 EST")
test = window(bitcoinpred.multivariate, start="2022-02-06 22:00:00 EST")
accuracy(Modelbitcoinpred,x = test)
length(test)
nrow(test)
seasonal_naive_model = snaive(train,h=375)
#Building VAR
Modelbitcoinpred <- VAR(train, p=6, h=375, type="const", season=NULL, exog=NULL)
library(ggplot2);library(ggthemes);library(gridExtra)  # For plots
library(quantmod);library(xts);library(zoo) # For using xts class objects
library(forecast) # Set of forecasting functions
library(fpp); library(fpp2) # Datasets from Forecasting text by Rob Hyndman
library(tseries) # for a statistical test
library(dplyr) # Data wrangling
library(lubridate)
library(urca)
library(vars)
library(mFilter)
library(tseries)
library(tidyverse)
library(zoo)
##Time Series Multivariate analysis
final_data <- read.csv("C://Users/Devika/Documents/Columbia/Term 2/Frameworks II/Project/Raw Files/cleandata_final.csv")
final_data$date <- mdy(final_data$date)
final_data$newdate <- as.POSIXct(paste(final_data$date, final_data$time), format="%Y-%m-%d %H:%M:%S")
drop <- c("X","ID","word","date","time")
final_data = final_data[,!(names(final_data) %in% drop)]
final_data_hourly <- final_data %>%
dplyr::mutate(new_date=newdate) %>%
dplyr::group_by(new_date) %>%
dplyr::summarise(BitcoinPrice = mean(BitcoinPrice))
for (col in colnames(final_data)) {
if ((col!= "BitcoinPrice") && (col!="newdate")){
print(col)
final_data_hourly[col] <- final_data %>%
dplyr::select(col, newdate)%>%
dplyr::group_by(newdate) %>%
dplyr::summarise(col=mean(get(col))) %>% dplyr::select(col)
}
}
bitcoin_price_ts <- zoo(
x         = final_data_hourly[["BitcoinPrice"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
SP500_ts <- zoo(
x         = final_data_hourly[["SP500Price"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
Bitcoin_Article_ts <- zoo(
x         = final_data_hourly[["Bitcoin_Article_1"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
Business_ts <- zoo(
x         = final_data_hourly[["Business_1"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
Financial_ts <- zoo(
x         = final_data_hourly[["Financial_1"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
anger_ts <- zoo(
x         = final_data_hourly[["anger"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
anticipation_ts <- zoo(
x         = final_data_hourly[["anticipation"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
disgust_ts <- zoo(
x         = final_data_hourly[["disgust"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
fear_ts <- zoo(
x         = final_data_hourly[["fear"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
joy_ts <- zoo(
x         = final_data_hourly[["joy"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
negative_ts <- zoo(
x         = final_data_hourly[["negative"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
positive_ts <- zoo(
x         = final_data_hourly[["positive"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
sadness_ts <- zoo(
x         = final_data_hourly[["sadness"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
surprise_ts <- zoo(
x         = final_data_hourly[["surprise"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
trust_ts <- zoo(
x         = final_data_hourly[["trust"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
OLS1 <- lm(bitcoin_price_ts ~ SP500_ts+Bitcoin_Article_ts+Twitter_ts+Business_ts+Financial_ts+anger_ts+anticipation_ts+disgust_ts+fear_ts+joy_ts+negative_ts+positive_ts+sadness_ts+surprise_ts+trust_ts)
summary(OLS1)
OLS1 <- lm(bitcoin_price_ts ~ SP500_ts+Bitcoin_Article_ts+Business_ts+Financial_ts+anger_ts+anticipation_ts+disgust_ts+fear_ts+joy_ts+negative_ts+positive_ts+sadness_ts+surprise_ts+trust_ts)
summary(OLS1)
#Finding the optimal lags
#bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts,Bitcoin_Article_ts,Twitter_ts,Business_ts,Financial_ts,anger_ts,anticipation_ts,disgust_ts,fear_ts,joy_ts,negative_ts,positive_ts,sadness_ts,surprise_ts,trust_ts)
bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts,Business_ts,Financial_ts,anger_ts,anticipation_ts,disgust_ts,fear_ts,joy_ts,negative_ts,positive_ts,sadness_ts,surprise_ts,trust_ts)
#colnames(bitcoinpred.multivariate) <- cbind("BitcoinPrice", "SP500Price","Bitcoin_Article","Twitter","Business","Financial","anger","anticipation","disgust","fear","joy","negative","positive","sadness","surprise","trust")
colnames(bitcoinpred.multivariate) <- cbind("BitcoinPrice", "SP500Price","Business","Financial","anger","anticipation","disgust","fear","joy","negative","positive","sadness","surprise","trust")
#Divide the data into train and test
train <- head(bitcoinpred.multivariate, round(nrow(bitcoinpred.multivariate) * 0.7))
h <- nrow(bitcoinpred.multivariate) - nrow(train)
test <- tail(bitcoinpred.multivariate, h)
lagselect <- VARselect(train, lag.max=10, type="const")
lagselect$selection
#Running the final model with 15 rmse
Modelbitcoinpred <- VAR(train, p=15, type="const", season=NULL, exog=NULL)
summary(Modelbitcoinpred)
#Predicting the values for RMSE
predicted_price <- predict(Modelbitcoinpred, n.ahead=nrow(test))
predicted_Bitcoin_price <- predicted_price$fcst$BitcoinPrice
actual_Bitcoin_price <- test$BitcoinPrice
rmse_time_series <- sqrt(mean((actual_Bitcoin_price - predicted_Bitcoin_price[,1])^2))
rmse_time_series
#Finding the optimal lags
bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts,Bitcoin_Article_ts,Twitter_ts,Business_ts,Financial_ts,anger_ts,anticipation_ts,disgust_ts,fear_ts,joy_ts,negative_ts,positive_ts,sadness_ts,surprise_ts,trust_ts)
Twitter_ts <- zoo(
x         = final_data_hourly[["Twitter_1"]],
order.by  = final_data_hourly[["new_date"]],
frequency = 24
)
#Finding the optimal lags
bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts,Bitcoin_Article_ts,Twitter_ts,Business_ts,Financial_ts,anger_ts,anticipation_ts,disgust_ts,fear_ts,joy_ts,negative_ts,positive_ts,sadness_ts,surprise_ts,trust_ts)
#bitcoinpred.multivariate <- cbind(bitcoin_price_ts, SP500_ts,Business_ts,Financial_ts,anger_ts,anticipation_ts,disgust_ts,fear_ts,joy_ts,negative_ts,positive_ts,sadness_ts,surprise_ts,trust_ts)
colnames(bitcoinpred.multivariate) <- cbind("BitcoinPrice", "SP500Price","Bitcoin_Article","Twitter","Business","Financial","anger","anticipation","disgust","fear","joy","negative","positive","sadness","surprise","trust")
#colnames(bitcoinpred.multivariate) <- cbind("BitcoinPrice", "SP500Price","Business","Financial","anger","anticipation","disgust","fear","joy","negative","positive","sadness","surprise","trust")
#Divide the data into train and test
train <- head(bitcoinpred.multivariate, round(nrow(bitcoinpred.multivariate) * 0.7))
h <- nrow(bitcoinpred.multivariate) - nrow(train)
test <- tail(bitcoinpred.multivariate, h)
#Finding the best RMSE by changing the lag parameter
rmse=0
#Running the final model with 15 rmse
Modelbitcoinpred <- VAR(train, p=15, type="const", season=NULL, exog=NULL)
summary(Modelbitcoinpred)
library(ggplot2);library(ggthemes);library(gridExtra)  # For plots
library(quantmod);library(xts);library(zoo) # For using xts class objects
library(forecast) # Set of forecasting functions
library(fpp); library(fpp2) # Datasets from Forecasting text by Rob Hyndman
library(tseries) # for a statistical test
library(dplyr) # Data wrangling
goog = readRDS('C://Users/Devika/Documents/Columbia/Term 2/Frameworks II/Assignments/goog.RDS')
class(goog)
head(goog)
cycle(goog)
time(goog)
start(goog)
end(goog)
goog_xts <- as.xts(goog)
head(goog_xts)
goog_xts['2010-06',]
mean(goog_xts['2010',])
nmonths(goog_xts)
cor(goog_xts,lag.xts(goog_xts),use = 'complete.obs')
google = ts(goog,start=c(2007,01),frequency=12)
train = window(google,start=c(2007,01),end=c(2015,12))
test = window(google,start=c(2016,01),end=c(2018,10))
nmonths(train)
ggAcf(train)
average_model = meanf(train,h = 34)
window(average_model$mean,c(2018,10))
accuracy(average_model)
accuracy(average_model,x = test)
naive_model = naive(train,h=34)
last(train)
accuracy(naive_model,x=test)
ets_aaa = ets(train,model = 'AAA')
summary(ets_aaa)
checkresiduals(ets_aaa)
ets_aaa_forecast = forecast(ets_aaa,h=34)
ets_aaa_forecast
accuracy(ets_aaa_forecast,x = test)
auto_arima_model = auto.arima(y=train)
auto_arima_model
checkresiduals(auto_arima_model)
auto_arima_model = auto.arima(y=train)
auto_arima_model
summary(auto_arima_model)
counts_abd_non_abd <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
counts_abd_non_abd <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd",as.is = TRUE)
abd_non_abd_count <- read.csv("/data/Count of Abandoned and Non-abd",as.is = TRUE)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd",as.is = TRUE)
pws
pwd
pwd()
getpwd()
getwd()
#========================================================================================================================================================================================
#Package
packages.used=c("shiny","dplyr","tidyverse","purrr","RSocrata","zipcodeR","shinydashboard")
# Check for packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(shiny)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(RSocrata)
library(purrr)
library(plotly)
library(hrbrthemes)
library(highcharter)
library(RColorBrewer)
library(zipcodeR)
library(shinydashboard)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd",as.is = TRUE)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
dir
packages.install("here")
library(here)
here()
library("rstudioapi")
getSourceEditorContext()$path
setwd(getSourceEditorContext()$path)
getSourceEditorContext()
setwd(getSourceEditorContext()$path)
getwd()
dirname(rstudioapi::getSourceEditorContext()$path)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
ggplot(abd_non_abd_count, aes(x=Year)) +
geom_line(aes(y = abd_non_abd_count$Number.of.Abandoned.Patents), color = "darkred") +
geom_line(aes(y = abd_non_abd_count$Number.of.Non.Abandoned.Patents), color="steelblue", linetype="twodash")
ggplot(abd_non_abd_count, aes(x=Year)) +
geom_line(aes(y = Number.of.Abandoned.Patents), color = "darkred") +
geom_line(aes(y = Number.of.Non.Abandoned.Patents), color="steelblue", linetype="twodash")
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "blue") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
ggplot(abd_non_abd_count, aes(x=Year, y=Number.of.Abandoned.Patents, col=variable)) + geom_line()
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "blue") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "blue") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "red") +
xlab('Dates') +
ylab('Number of Patents')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "blue") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "red") +
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
xlab('Dates') +
ylab('Number of Patents')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "Number of abandoned") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "Non-abandoned") +
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
xlab('Dates') +
ylab('Number of Patents')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "Number of abandoned") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "Non-abandoned") +
xlab('Dates') +
ylab('Number of Patents')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "Number of abandoned") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "Non-abandoned") +
scale_colour_manual("",
breaks = c("Number of abandoned", "Non-abandoned"),
values = c("Number of abandoned"="green", "Non-abandoned"="red")) +
xlab('Dates') +
ylab('Number of Patents')
print(p)
p = ggplot() +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Abandoned.Patents), color = "Number of abandoned") +
geom_line(data = abd_non_abd_count, aes(x = Year, y = Number.of.Non.Abandoned.Patents), color = "Non-abandoned") +
scale_colour_manual("",
breaks = c("Number of abandoned", "Non-abandoned"),
values = c("green", "red")) +
xlab('Dates') +
ylab('Number of Patents')
print(p)
abd_non_abd_count <- read.csv("./data/Count of Abandoned and Non-abd.csv",as.is = TRUE)
p = ggplot(dd) + geom_line(aes(x=abd_non_abd_count, y=Count, colour=Type)) +
scale_colour_manual(values=c("green","blue"))
print(p)
p = ggplot(dd) + geom_line(aes(x=Year, y=Count, colour=Type)) +
scale_colour_manual(values=c("green","blue"))
print(p)
p = ggplot(abd_non_abd_count) + geom_line(aes(x=Year, y=Count, colour=Type)) +
scale_colour_manual(values=c("green","blue"))
print(p)
p = ggplot(abd_non_abd_count) + geom_line(aes(x=Year, y=Count, colour=Type)) +
scale_colour_manual(values=c("green","blue"))
print(p)
runApp()
